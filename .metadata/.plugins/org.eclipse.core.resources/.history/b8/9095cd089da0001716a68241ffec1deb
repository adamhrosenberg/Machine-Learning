#include <iostream>
#include <fstream>
#include <string>
#include <vector>
#include <algorithm>
#include <sstream>

using namespace std;
double NORMALIZED_VALUE = 0.18257;

struct point {
	double x, y;
};


vector<point> fill(string line) {
	//we have a line. now split line by spaces to have a new vector.
	line = line.substr(2);
	string buf;
	stringstream ss(line);
	vector<string> tokens;
	vector<point> row; //to return.
	vector<point> temp;

	while (ss >> buf) {
		tokens.push_back(buf);
	}

	//replace each colon with a space to seperate again.
	for (int i = 0; i < tokens.size(); i++) {
		replace(tokens.at(i).begin(), tokens.at(i).end(), ':', ' ');

		string colBuf;
		stringstream ss2(tokens.at(i));
		vector<string> line;

		while (ss2 >> colBuf) {
			line.push_back(colBuf);
		}

		//pull values from string
		double x = atoi(line.at(0).c_str());
		double y = atoi(line.at(1).c_str());

		point p;
		p.x = x;
		p.y = y;
		temp.push_back(p);
	}

	int count = 0;

	//fill an empty row.
	for(int i = 1; i < 69; i++){
		point p;
		p.x = i;
		p.y = 0;
		row.push_back(p);
	}

	//set last element in the row to one, so the dot product with the weight vector is allowed.
	point p;
	p.x = 1;
	p.y = 1;
	row.push_back(p);

	//for each non zero value in the row set it to the row element correctly.
	for (int i = 0; i < temp.size(); i++) {
		point nonZero;
		nonZero.x = temp.at(i).x; //the index into row.
		nonZero.y = NORMALIZED_VALUE;
		row[nonZero.x-1] = nonZero;
	}
	return row;
}

double dotP(vector<double>weights, vector<point>row){
	double result = 0;
	for(int i = 0; i < row.size(); i++){
		result += weights.at(i) * row.at(i).y;
	}
	return result;
}

vector<double> update(vector<double> * weights, double trainingY, vector<point> row, double r){
	for(int i = 0; i < row.size(); i++){
		//were at the bias and do b += ry;
		if(i == row.size()-1){
			double weight = weights->at(i)+ (r * trainingY);
			weights->at(i) = weight;
		}else{
			//not at the bias.
			double weight = weights->at(i)+ (r * trainingY * row.at(i).y);
			weights->at(i) = weight;
		}
	}
}

double checkAccuracy(vector<int> labels, vector<int> predictions){
//	cout << labels.size() << predictions.size() << endl;

	return 0.01;
}

double basicPerceptron(vector<vector<point> > matrix, vector<int> labels, double r){
//	vector<double> weights(69, 0.0); //weights vector. TODO init w/ small values. . last element is the bias.

	vector<double>weights;
	vector<double> predictions;
	double numRight = 0;
	double numWrong = 0;
	double trainingY = 0;


	//for each example in the training set
	for (int i = 0; i < matrix.size(); i++) {
		//make a prediction and compare with training Y
		trainingY = labels.at(i); //the label that comes with the data
		//take the dot product of the weights matrix and the row of the matrix we're currently in
		double prediction = dotP(weights, matrix.at(i));
		//add this prediction to the prediction vector to check accuracy.
		if(prediction > 0){
			prediction = 1;
		}else if(prediction <= 0){
			prediction = -1;
		}

//		predictions.push_back(prediction);

		if(prediction != trainingY){
			numWrong ++;
			update(&weights, trainingY, matrix.at(i), r);
		}else{
			numRight++;
		}

	}

	double accuracy = numRight / (numRight + numWrong);
}
int main() {

	string path = "Dataset/phishing.train";
	ifstream pipein(path.c_str());

	vector<string> tempLines; //used to temp store the file to go through it.
	vector<vector<point> > matrix; //matrix of input data.
	vector<int> labels; // -1, +1 label vector.


	//read in the file. push file lines to another vector and handle the labels. O(2n) to make it look a little cleaner
	for (string line; getline(pipein, line);) {
		tempLines.push_back(line);
		if (line.at(0) == '+') {
			labels.push_back(1);
		} else {
			labels.push_back(-1);
		}
	}


	//for each line of the file. create a row of the matrix based on the data. add that row to the matrix. each row is 67 long. 0-66. first x in the 0th element has a value of 1.
	for (int i = 0; i < tempLines.size(); i++) {
		vector<point> row = fill(tempLines.at(i));
		matrix.push_back(row);
	}


	vector<double> learningRate;
	learningRate.push_back(1);
	learningRate.push_back(0.1);
	learningRate.push_back(0.01);

	vector<double> basicAccuracies;
	double accuracySum = 0;
	//call perceptron with each value of r
	for(int i = 0; i < learningRate.size(); i++){
		double accuracy = basicPerceptron(matrix, labels, learningRate.at(i));
		basicAccuracies.push_back(accuracy);
		accuracySum += accuracy;
		cout << "Basic Perceptron accuracy = " << accuracy << "% with a learning rate of: " << learningRate.at(i) << endl;
		if(i == learningRate.size()-1)
			cout << "Mean accuracy for Basic Perceptron: " << accuracySum / learningRate.size() << "%" << endl;
	}





	return 0;
}
